# Generated by Django 5.2.4 on 2025-09-16 19:58

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('categories', '0001_initial'),
        ('tournaments', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='TournamentCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='name', max_length=30)),
                ('price', models.DecimalField(db_column='price', decimal_places=2, default=0, max_digits=10)),
                ('comment', models.TextField(blank=True, db_column='comment', null=True)),
                ('is_active', models.BooleanField(db_column='is_active', default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_column='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_column='updated_at')),
                ('category', models.ForeignKey(blank=True, db_column='category_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tournament_categories', to='categories.category')),
                ('tournament', models.ForeignKey(db_column='tournament_id', on_delete=django.db.models.deletion.CASCADE, related_name='tournament_categories', to='tournaments.tournament')),
            ],
            options={
                'verbose_name': 'Tournament Category',
                'verbose_name_plural': 'Tournament Categories',
                'db_table': 'tournament_categories',
                'ordering': ['tournament_id', 'name'],
                'default_related_name': 'tournament_categories',
                'indexes': [models.Index(fields=['tournament', 'is_active'], name='tc_tourn_active_idx'), models.Index(fields=['tournament', 'name'], name='tc_tourn_name_idx'), models.Index(fields=['category'], name='tc_category_idx'), models.Index(fields=['is_active'], name='tc_is_active_idx')],
                'constraints': [models.UniqueConstraint(fields=('tournament', 'name'), name='unique_name_per_tournament'), models.CheckConstraint(condition=models.Q(('name', ''), _negated=True), name='ck_tc_name_not_empty'), models.CheckConstraint(condition=models.Q(('price__gte', 0)), name='ck_tc_price_ge_0')],
            },
        ),
    ]
